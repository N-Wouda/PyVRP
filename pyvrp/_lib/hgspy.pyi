from typing import Any, List, Tuple, overload

class Client:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def demand(self) -> int: ...
    @property
    def release_time(self) -> int: ...
    @property
    def serv_dur(self) -> int: ...
    @property
    def tw_early(self) -> int: ...
    @property
    def tw_late(self) -> int: ...
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...

class DoubleMatrix:
    @overload
    def __init__(self, dimension: int) -> None: ...
    @overload
    def __init__(self, n_rows: int, n_cols: int) -> None: ...
    @overload
    def __init__(self, data: List[List[float]]) -> None: ...
    def max(self) -> float: ...
    def size(self) -> int: ...
    def __getitem__(self, idx: Tuple[int, int]) -> float: ...
    def __setitem__(self, idx: Tuple[int, int], value: float) -> None: ...

class Individual:
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        rng: XorShift128,
    ) -> None: ...
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        routes: List[List[int]],
    ) -> None: ...
    def cost(self) -> int: ...
    def get_neighbours(self) -> List[Tuple[int, int]]: ...
    def get_routes(self) -> List[List[int]]: ...
    def has_excess_capacity(self) -> bool: ...
    def has_time_warp(self) -> bool: ...
    def is_feasible(self) -> bool: ...
    def num_routes(self) -> int: ...
    def to_file(self, arg0: str, arg1: float) -> None: ...

class IntMatrix:
    @overload
    def __init__(self, dimension: int) -> None: ...
    @overload
    def __init__(self, n_rows: int, n_cols: int) -> None: ...
    @overload
    def __init__(self, data: List[List[int]]) -> None: ...
    def max(self) -> int: ...
    def size(self) -> int: ...
    def __getitem__(self, idx: Tuple[int, int]) -> int: ...
    def __setitem__(self, idx: Tuple[int, int], value: int) -> None: ...

class LocalSearch:
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        rng: XorShift128,
        params: LocalSearchParams,
    ) -> None: ...
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        rng: XorShift128,
    ) -> None: ...
    def add_node_operator(self, op) -> None: ...
    def add_route_operator(self, op) -> None: ...
    def intensify(self, indiv: Individual) -> None: ...
    def search(self, indiv: Individual) -> None: ...

class LocalSearchParams:
    def __init__(
        self,
        weight_wait_time: int = ...,
        weight_time_warp: int = ...,
        nb_granular: int = ...,
        post_process_path_length: int = ...,
    ) -> None: ...
    @property
    def nb_granular(self) -> int: ...
    @property
    def post_process_path_length(self) -> int: ...
    @property
    def weight_time_warp(self) -> int: ...
    @property
    def weight_wait_time(self) -> int: ...

class PenaltyBooster:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self) -> PenaltyBooster: ...
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None: ...

class PenaltyManager:
    @overload
    def __init__(
        self, vehicle_capacity: int, params: PenaltyParams
    ) -> None: ...
    @overload
    def __init__(self, vehicle_capacity: int) -> None: ...
    def get_penalty_booster(self) -> PenaltyBooster: ...
    def load_penalty(self, arg0: int) -> int: ...
    def tw_penalty(self, arg0: int) -> int: ...
    def update_capacity_penalty(self, arg0: float) -> None: ...
    def update_time_warp_penalty(self, arg0: float) -> None: ...

class PenaltyParams:
    def __init__(
        self,
        init_capacity_penalty: int = ...,
        init_time_warp_penalty: int = ...,
        repair_booster: int = ...,
        penalty_increase: float = ...,
        penalty_decrease: float = ...,
        target_feasible: float = ...,
    ) -> None: ...
    @property
    def init_capacity_penalty(self) -> int: ...
    @property
    def init_time_warp_penalty(self) -> int: ...
    @property
    def penalty_decrease(self) -> float: ...
    @property
    def penalty_increase(self) -> float: ...
    @property
    def repair_booster(self) -> int: ...
    @property
    def target_feasible(self) -> float: ...

class ProblemData:
    def __init__(
        self,
        coords: List[Tuple[int, int]],
        demands: List[int],
        nb_vehicles: int,
        vehicle_cap: int,
        time_windows: List[Tuple[int, int]],
        service_durations: List[int],
        duration_matrix: List[List[int]],
        release_times: List[int],
    ) -> None: ...
    def client(self, client: int) -> Client: ...
    def depot(self) -> Client: ...
    def dist(self, arg0: int, arg1: int) -> int: ...
    def distance_matrix(self) -> IntMatrix: ...
    def from_file(self, *args, **kwargs) -> Any: ...
    def num_clients(self) -> int: ...
    def num_vehicles(self) -> int: ...
    def vehicle_capacity(self) -> int: ...

class TimeWindowSegment:
    def __init__(
        self,
        dist: IntMatrix,
        idx_first: int,
        idx_last: int,
        duration: int,
        time_warp: int,
        tw_early: int,
        tw_late: int,
        release: int,
    ) -> None: ...
    @overload
    def merge(self, arg0: TimeWindowSegment) -> TimeWindowSegment: ...
    @overload
    def merge(
        self, arg0: TimeWindowSegment, arg1: TimeWindowSegment
    ) -> TimeWindowSegment: ...
    @overload
    def merge(
        self,
        arg0: TimeWindowSegment,
        arg1: TimeWindowSegment,
        arg2: TimeWindowSegment,
    ) -> TimeWindowSegment: ...
    def segment_time_warp(self) -> int: ...
    def total_time_warp(self) -> int: ...

class XorShift128:
    def __init__(self, seed: int) -> None: ...
    def max(self) -> int: ...
    def min(self) -> int: ...
    def randint(self, high: int) -> int: ...
    def __call__(self) -> int: ...
